#include<iostream>
#include<vector>
#include<math.h>
#include<algorithm>

struct Point 
{
	int x, y;
};

//bool check_intersection(vector<Point> res){}

double distance(Point a, Point b) {
    return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2));
}

double perimeter(vector<Point> polygon) {
    double result = 0;
    for (int i = 0; i < polygon.size(); i++) {
        result += distance(polygon[i], polygon[(i + 1) % polygon.size()]);
    }
    return result;
}

void build_polygons(vector<Point> points, vector<Point> res) 
{
    if (points.empty()) 
    {
        res.push_back(res[0]);
        if (check_intersection(res))
        {
            /*cout << "\n-------------------\nIntersected polygon: ";
            for (int i = 0; i < res.size(); i++)
            {
                cout << " (" << res[i].x << " ," << res[i].y << ") ";
            }
            cout << "\n-------------------\n";*/
            return;
        }
        else 
        {
            cout << "Polygon: ";
            for (int i = 0; i < res.size(); i++) 
            {
                cout << " (" << res[i].x << " ," << res[i].y << ") ";
            }
            cout << "Perimeter: " << perimeter(res) << '\n';
            return;
        }
    }
    for (int i = 0; i < points.size(); i++) 
    {
        vector<Point> new_points = points;
        vector<Point> new_res = res;
        new_res.push_back(points[i]);
        new_points.erase(new_points.begin() + i);
        build_polygons(new_points, new_res);
    }
}

int main() 
{
    int n,x,y;
    std::cin >> n;
    vector<Point> points(n);
    for (int i = 0; i < n; ++i)
    {
        std::cin >> x >> y;
        points[i].x = x;
        points[i].y = y;
    }
    vector<Point> res;
    build_polygons(points, res);
    return 0;
}
