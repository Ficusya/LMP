#include <iostream>
#include <thread>
using std::thread;
using std::cout;

int count = 0;
const int n = 4, m = 5;
int a[n][m];
const size_t NTHREAD = 3;
size_t range = n / NTHREAD;

void task(int i)
{
    bool flag = true;
    for (int k = i; k < i + range; ++k)
    {
        for (int j = 0; j < m / 2; ++j)
        {
            if (a[k][j] != a[k][m - j - 1])
            {
                flag = false;
            }
        }
        if (flag)
            count++;
        else flag = true;
    }
}

int main()
{
    srand(time(NULL));
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            a[i][j] = rand() % 2;
            cout << a[i][j] << " ";
        }
        cout << '\n';
    }
    thread threads[NTHREAD];
    for (int i = 0; i < NTHREAD; ++i)
    {
        threads[i] = thread(task, i * range);
    }

    bool flag = true;
    for (int i = range * NTHREAD; i < n; ++i)
    {
        for (int j = 0; j < m / 2; ++j)
        {
            if (a[i][j] != a[i][m - j - 1])
                flag = false;
        }
        if (flag) ++count;
        else flag = true;
    }

    for (int i = 0; i < NTHREAD; i++)
    {
        threads[i].join();
    }

    cout << count << '\n';
    return 0;
}
